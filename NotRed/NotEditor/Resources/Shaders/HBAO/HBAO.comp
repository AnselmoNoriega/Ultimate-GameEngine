// References:
// - Implementation mostly adapted from https://github.com/bcrusco/Forward-Plus-Renderer
//
#version 450

layout(std140, binding = 17) uniform HBAOData
{
	vec4	uPerspectiveInfo;   // R = (x) * (R - L)/N ||| G = (y) * (T - B)/N ||| B =  L/N ||| A =  B/N
	vec2    uInvQuarterResolution;
	float   uRadiusToScreen;        // radius
	float   uNegInvR2;     // radius * radius
	float   uNDotVBias;
	float   uAOMultiplier;
	float   uPowExponent;
	bool	uIsOrtho;
	vec4    uFloat2Offsets[16];
	vec4    uJitters[16];
};

layout(binding = 0) uniform sampler2DArray uLinearDepthTexArray;
layout(binding = 1) uniform sampler2D uViewNormalsTex;
layout(binding = 2) uniform sampler2D uViewPositionTex;
layout(binding = 19, rg16f) restrict writeonly uniform image2DArray oColor;

// The pragma below is critical for optimal performance
// in this fragment shader to let the shader compiler
// fully optimize the maths and batch the texture fetches
// optimally

#pragma optionNV(unroll all)


#define M_PI 3.14159265f
#define AO_RANDOMTEX_SIZE 4

// tweakables
const float  NUM_STEPS = 4;
const float  NUM_DIRECTIONS = 8; // texRandom/gJitter initialization depends on this



vec2 gFloat2Offset = uFloat2Offsets[gl_GlobalInvocationID.z].xy;
vec4 gJitter = uJitters[gl_GlobalInvocationID.z];


vec3 GetQuarterCoord(vec2 UV) {
	return vec3(UV, float(gl_GlobalInvocationID.z));
}


//----------------------------------------------------------------------------------

vec3 UVToView(vec2 uv, float eye_z)
{
	return vec3((uv * uPerspectiveInfo.xy + uPerspectiveInfo.zw) * (uIsOrtho ? 1.0 : eye_z), eye_z);
}


vec3 FetchQuarterResViewPos(vec2 UV)
{
	float ViewDepth = textureLod(uLinearDepthTexArray, GetQuarterCoord(UV), 0).x;
	return UVToView(UV, ViewDepth);
}

//----------------------------------------------------------------------------------

float Falloff(float DistanceSquare)
{
	// 1 scalar mad instruction
	return DistanceSquare * uNegInvR2 + 1.0;
}

//----------------------------------------------------------------------------------
// P = view-space position at the kernel center
// N = view-space normal at the kernel center
// S = view-space position of the current sample
//----------------------------------------------------------------------------------
float ComputeAO(vec3 P, vec3 N, vec3 S)
{
	vec3 V = S - P;
	float VdotV = dot(V, V);
	float NdotV = dot(N, V) * 1.0 / sqrt(VdotV);

	// Use saturate(x) instead of max(x,0.f) because that is faster on Kepler
	return clamp(NdotV - uNDotVBias, 0, 1) * clamp(Falloff(VdotV), 0, 1);
}

//----------------------------------------------------------------------------------
vec2 RotateDirection(vec2 dir, vec2 cosSin)
{
	return vec2(dir.x * cosSin.x - dir.y * cosSin.y, dir.x * cosSin.y + dir.y * cosSin.x);
}

//----------------------------------------------------------------------------------
vec4 GetJitter()
{
	// Get the current jitter vector from the per-pass constant buffer
	return gJitter;
}

//----------------------------------------------------------------------------------
float ComputeCoarseAO(vec2 fullResUV, float radiusPixels, vec4 rand, vec3 viewPosition, vec3 viewNormal)
{
	radiusPixels /= 4.0;

	// Divide by NUM_STEPS+1 so that the farthest samples are not fully attenuated

	float stepSizePixels = radiusPixels / (NUM_STEPS + 1);

	const float alpha = 2.0 * M_PI / NUM_DIRECTIONS;
	float ao = 0;
	for (float directionIndex = 0; directionIndex < NUM_DIRECTIONS; ++directionIndex)
	{
		float angle = alpha * directionIndex;


		// Compute normalized 2D direction
		vec2 direction = RotateDirection(vec2(cos(angle), sin(angle)), rand.xy);

		// Jitter starting sample within the first step
		float rayPixels = (rand.z * stepSizePixels + 1.0);

		for (float stepIndex = 0; stepIndex < NUM_STEPS; ++stepIndex)
		{
			vec2 snappedUV = round(rayPixels * direction) * uInvQuarterResolution + fullResUV;
			vec3 S = FetchQuarterResViewPos(snappedUV);
			rayPixels += stepSizePixels;

			ao += ComputeAO(viewPosition, viewNormal, S);
		}
	}
	ao *= uAOMultiplier / (NUM_DIRECTIONS * NUM_STEPS);
	return (clamp(1.0 - ao * 2.0, 0, 1));
}

//----------------------------------------------------------------------------------
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;
void main()
{
	vec2 base = gl_GlobalInvocationID.xy * 4 + gFloat2Offset;
	vec2 uv = base * uInvQuarterResolution / 4;

	vec3 viewPosition = texelFetch(uViewPositionTex, ivec2(base), 0).xyz;
    viewPosition.z = -viewPosition.z;

    vec3 hbaoNormal = texelFetch(uViewNormalsTex, ivec2(base), 0).xyz * 0.5 + 0.5;
    hbaoNormal.x = 1.0f - hbaoNormal.x;
    hbaoNormal.y = 1.0f - hbaoNormal.y;

    vec3 viewNormal = -(hbaoNormal.xyz * 2.0 - 1.0);

	// Compute projection of disk of radius control.R into screen space
	float radiusPixels = uRadiusToScreen / (uIsOrtho ? 1.0 : viewPosition.z);

	// Get jitter vector for the current full-res pixel
	vec4 rand = GetJitter();

	float AO = ComputeCoarseAO(uv, radiusPixels, rand, viewPosition, viewNormal);

	//out_Color = vec4(pow(AO, uPowExponent), ViewPosition.z, 0, 1);
	imageStore(oColor, ivec3(gl_GlobalInvocationID), vec4(pow(AO, uPowExponent), viewPosition.z, 0.0, 1.0));
}

